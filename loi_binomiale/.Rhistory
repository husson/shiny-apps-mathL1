if (!is.null(select)) {
if (mode(select)=="numeric") selection <- select
else {
if (sum(rownames(res.pca$var$coord)%in%select)+sum(rownames(res.pca$quanti.sup$coord)%in%select)!=0) selection <- which(rownames(res.pca$var$coord)%in%select)
else {
if (grepl("contrib",select[1])) selection <- (rev(order(res.pca$var$contrib[,axes[1]]*res.pca$eig[axes[1],1]+res.pca$var$contrib[,axes[2]]*res.pca$eig[axes[2],1])))[1:min(nrow(res.pca$var$coord),sum(as.integer(unlist(strsplit(select,"contrib"))),na.rm=T))]
if (grepl("coord",select[1])) selection <- (rev(order(apply(res.pca$var$coord[,axes]^2,1,sum))))[1:min(nrow(res.pca$var$coord),sum(as.integer(unlist(strsplit(select,"coord"))),na.rm=T))]
if (grepl("cos2",select[1])) {
if (sum(as.numeric(unlist(strsplit(select,"cos2"))),na.rm=T)>=1) selection <- (rev(order(apply(res.pca$var$cos2[,axes],1,sum))))[1:min(nrow(res.pca$var$coord),sum(as.numeric(unlist(strsplit(select,"cos2"))),na.rm=T))]
else selection <- which(apply(res.pca$var$cos2[,axes],1,sum)>sum(as.numeric(unlist(strsplit(select,"cos2"))),na.rm=T))
}
if (is.integer(select)) selection <- select
}
}
}
if ((!is.null(select))&(!is.null(res.pca$quanti.sup))) {
if (mode(select)=="numeric") selectionS <- select
else {
if (sum(rownames(res.pca$var$coord)%in%select)+sum(rownames(res.pca$quanti.sup$coord)%in%select)!=0) selectionS <- which(rownames(res.pca$quanti.sup$coord)%in%select)
else {
if (grepl("contrib",select[1])) selectionS <- NULL
if (grepl("coord",select[1])) selectionS <- (rev(order(apply(res.pca$quanti.sup$coord[,axes]^2,1,sum))))[1:min(nrow(res.pca$quanti.sup$coord),sum(as.integer(unlist(strsplit(select,"coord"))),na.rm=T))]
if (grepl("cos2",select[1])) {
if (sum(as.numeric(unlist(strsplit(select,"cos2"))),na.rm=T)>=1) selectionS <- (rev(order(apply(res.pca$quanti.sup$cos2[,axes],1,sum))))[1:min(nrow(res.pca$quanti.sup$coord),sum(as.numeric(unlist(strsplit(select,"cos2"))),na.rm=T))]
else selectionS <- which(apply(res.pca$quanti.sup$cos2[,axes],1,sum)>sum(as.numeric(unlist(strsplit(select,"cos2"))),na.rm=T))
}
if (is.integer(select)) selectionS <- select
}
}
}
test.invisible <- vector(length = 2)
if (!is.null(invisible)) {
test.invisible[1] <- match("var", invisible)
test.invisible[2] <- match("quanti.sup", invisible)
}
else  test.invisible <- rep(NA, 2)
scale.unit <- res.pca$call$scale.unit
coord.var <- res.pca$var$coord[, axes,drop=FALSE]
if (!is.null(res.pca$quanti.sup))  coord.quanti <- res.pca$quanti.sup$coord[, axes, drop=FALSE]
else coord.quanti <- NULL
if (scale.unit)  xlim <- ylim <- c(-1, 1)
else {
xmin <- min(0,coord.var[, 1], coord.quanti[, 1])
xmax <- max(0,coord.var[, 1], coord.quanti[, 1])
ymin <- min(0,coord.var[, 2], coord.quanti[, 2])
ymax <- max(0,coord.var[, 2], coord.quanti[, 2])
xlim <- c(xmin, xmax) * 1.2
ylim <- c(ymin, ymax) * 1.2
}
if ((new.plot)&!nzchar(Sys.getenv("RSTUDIO_USER_IDENTITY"))) dev.new()
if (is.null(palette)) palette(c("black","red","green3","blue","cyan","magenta","darkgray","darkgoldenrod","darkgreen","violet","turquoise","orange","lightpink","lavender","yellow","lightgreen","lightgrey","lightblue","darkkhaki", "darkmagenta","darkolivegreen","lightcyan", "darkorange", "darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet", "lightgray","lightsalmon","lightyellow", "maroon"))
# cercle variables factor map
if (graph.type == "classic") {
if (scale.unit) {
plot(0, 0, xlab = lab.x, ylab = lab.y, xlim = xlim, ylim = ylim, col = "white", asp=1, main=titre,...)
x.cercle <- seq(-1, 1, by = 0.01)
y.cercle <- sqrt(1 - x.cercle^2)
lines(x.cercle, y = y.cercle,...)
lines(x.cercle, y = -y.cercle,...)
}
else {
plot(0, 0, main = titre, xlab = lab.x, ylab = lab.y, xlim = xlim, ylim = ylim, col = "white", asp=1, ...)
}
abline(v=0,lty=2,...)
abline(h=0,lty=2,...)
}
#
coll <- coo <- labe <- posi <- NULL
if (!is.null(coord.var[ which(apply(res.pca$var$cos2[, axes,drop=FALSE],1,sum, na.rm = TRUE) >= lim.cos2.var),])&is.na(test.invisible[1])&(nrow(coord.var)>0)){
coord.var <- coord.var[ which(apply(res.pca$var$cos2[, axes,drop=FALSE],1,sum, na.rm = TRUE) >= lim.cos2.var),,drop=FALSE]
coo <- coord.var
col.var <- rep(col.var,nrow(coord.var))
coll <- c(coll,col.var)
if (!is.null(col.hab)) coll <- col.hab[which(colnames(res.pca$call$X)%in%rownames(res.pca$var$coord))]
if (lab.var){ labe <- c(labe,rownames(coord.var))
} else  labe <- c(labe,rep("",nrow(coord.var)))
if (!is.null(selection)){
if (is.numeric(unselect)) coll[!((1:length(coll))%in%selection)] = rgb(t(col2rgb(coll[!((1:length(coll))%in%selection)])),alpha=255*(1-unselect),maxColorValue=255)
else coll[!((1:length(coll))%in%selection)] = unselect
labe[!((1:length(coll))%in%selection)] <- ""
}
# fleches
if (graph.type == "classic") {
for (v in 1:nrow(coord.var)) {
arrows(0, 0, coord.var[v, 1], coord.var[v, 2], length = 0.1, angle = 15, code = 2, col = coll[v])
if (lab.var) {
if (abs(coord.var[v,1])>abs(coord.var[v,2])){
if (coord.var[v,1]>=0) posi<-c(posi,4)
else posi<-c(posi,2)
}
else {
if (coord.var[v,2]>=0) posi<-c(posi,3)
else posi<-c(posi,1)
}
}
}
}}
#
if (!is.null(coord.quanti)){
if (!is.null(coord.quanti[ which(apply(res.pca$quanti.sup$cos2[, axes,drop=FALSE],1,sum, na.rm = TRUE) >= lim.cos2.var),])& is.na(test.invisible[2]) & (nrow(coord.quanti)>0)) {
coord.quanti <- coord.quanti[ which(apply(res.pca$quanti.sup$cos2[, axes,drop=FALSE],1,sum, na.rm = TRUE) >= lim.cos2.var),,drop=FALSE]
coo <- rbind(coo,coord.quanti)
col.quanti.sup<-rep(col.quanti.sup, nrow(coord.quanti))
if (is.null(col.hab)) coll2 <- col.quanti.sup
else coll2 <- col.hab[which(colnames(res.pca$call$X)%in%colnames(res.pca$call$quanti.sup))]
if (lab.quanti){ labe2 <- rownames(coord.quanti)
} else  labe2 <- rep("",nrow(coord.quanti))
if (length(select)==1){
if (grepl("contrib",select)){
if (is.numeric(unselect)) coll2[1:length(coll2)] = rgb(t(col2rgb(coll2[1:length(coll2)])),alpha=255*(1-unselect),maxColorValue=255)
else coll2[1:length(coll2)] = unselect
labe2[1:length(coll2)] <- ""
}}
if (!is.null(selectionS)){
if (is.numeric(unselect)) coll2[!((1:length(coll2))%in%selectionS)] = rgb(t(col2rgb(coll2[!((1:length(coll2))%in%selectionS)])),alpha=255*(1-unselect),maxColorValue=255)
else coll2[!((1:length(coll2))%in%selectionS)] = unselect
labe2[!((1:length(coll2))%in%selectionS)] <- ""
}
#
if (graph.type == "classic"){
for (q in 1:nrow(coord.quanti)) {
arrows(0, 0, coord.quanti[q, 1], coord.quanti[q, 2], length = 0.1, angle = 15, code = 2, lty = 2, col=coll2[q])
#
if (lab.quanti) {
if (abs(coord.quanti[q,1])>abs(coord.quanti[q,2])){
if (coord.quanti[q,1]>=0) posi<-c(posi,4)
else posi<-c(posi,2)
}
else {
if (coord.quanti[q,2]>=0) posi<-c(posi,3)
else posi<-c(posi,1)
}
}
}}
labe <- c(labe,labe2)
coll <- c(coll,coll2)
}
}
if (graph.type == "classic"){
if (any(labe!="")){
if (autoLab=="auto") autoLab = (length(which(labe!=""))<50)
if (autoLab==FALSE) text(coo[labe!="", 1], y = coo[labe!="", 2], labels = labe[labe!=""], pos = posi[labe!=""], col = coll[labe!=""],...)
if (autoLab==TRUE) autoLab(coo[labe!="", 1], y = coo[labe!="", 2], labels = labe[labe!=""], col = coll[labe!=""], shadotext=shadowtext,...)
}}
if (graph.type == "ggplot"){
if((!is.na(test.invisible[1])) & (habillage[1] != "none") & (is.null(legend["title"][[1]]))){
legend["title"][[1]] = habillage[1]}
if (autoLab=="auto") autoLab = (length(which(labe!=""))<50)
df_var <- data.frame(labe,coo)
if (length(habillage) != 1){
warning("Habillage must be length 1")
habillage = habillage[1]
}
if (!(habillage[1] %in% c("contrib","cos2","none"))){
warning("Habillage must be in c('contrib','cos2','none')")
habillage = "none"
}
circle <- annotate("path",
x=0+1*cos(seq(0,2*pi,length.out=100)),
y=0+1*sin(seq(0,2*pi,length.out=100)),
lty = ggoptions_default$circle.lty,
lwd = ggoptions_default$circle.lwd,
color = ggoptions_default$circle.color)
transparency_var <- ifelse(rownames(res.pca$var$coord) %in% labe, 1, 1-unselect)
if (is.na(test.invisible[1])){
if (((habillage[1] != "contrib") & (habillage[1] != "cos2"))) {
gg_graph <- ggplot() +
aes(x=df_var[rownames(res.pca$var$coord),2], y=df_var[rownames(res.pca$var$coord),3]) +
coord_fixed(ratio = 1) +
geom_line(aes(x=x, y=y), data=data.frame(x=-1:1,y=0),lty=ggoptions_default$line.lty, lwd = ggoptions_default$line.lwd, color=ggoptions_default$line.color) +
geom_line(aes(x=x, y=y), data=data.frame(x=0,y=-1:1),lty=ggoptions_default$line.lty, lwd = ggoptions_default$line.lwd, color=ggoptions_default$line.color) +
geom_segment(aes(x=0,y=0,xend=df_var[rownames(res.pca$var$coord),2], yend=df_var[rownames(res.pca$var$coord),3]),arrow=arrow(length=unit(0.2,"cm")),alpha = transparency_var, lty = ggoptions_default$segment.lty, lwd = ggoptions_default$segment.lwd) +
xlab(lab.x) + ylab(lab.y) +
ggtitle(titre) +
theme_light()  +
ggoptions_default$theme
if(autoLab) text <- ggrepel::geom_text_repel(aes(x=df_var[rownames(res.pca$var$coord),2], y=df_var[rownames(res.pca$var$coord),3],label=df_var[rownames(res.pca$var$coord),1]), size = ggoptions_default$size, color = col.var)
else{text <- geom_text(aes(x=df_var[rownames(res.pca$var$coord),2], y=df_var[rownames(res.pca$var$coord),3],label=df_var[rownames(res.pca$var$coord),1]), size = ggoptions_default$size, color = col.var, nudge_y = 0.15)}
}
if (habillage[1] == "cos2"){
gg_graph <- ggplot() +
aes(x=df_var[rownames(res.pca$var$coord),2], y=df_var[rownames(res.pca$var$coord),3], color = res.pca$var$cos2[,axes[1]] + res.pca$var$cos2[,axes[2]]) +
coord_fixed(ratio = 1) +
geom_line(aes(x=x, y=y), data=data.frame(x=-1:1,y=0),lty=ggoptions_default$line.lty, lwd = ggoptions_default$line.lwd, color=ggoptions_default$line.color) +
geom_line(aes(x=x, y=y), data=data.frame(x=0,y=-1:1),lty=ggoptions_default$line.lty, lwd = ggoptions_default$line.lwd, color=ggoptions_default$line.color) +
geom_segment(aes(x=0,y=0,xend=df_var[rownames(res.pca$var$coord),2], yend=df_var[rownames(res.pca$var$coord),3]),arrow=arrow(length=unit(0.2,"cm")),alpha = transparency_var, lty = ggoptions_default$segment.lty, lwd = ggoptions_default$segment.lwd) +
xlab(lab.x) + ylab(lab.y) +
ggtitle(titre) +
scale_color_gradient(low=ggoptions_default$low.col.quanti, high=ggoptions_default$high.col.quanti)+
labs(color = ifelse(legend["title"] %in% legend, legend["title"][[1]], "cos²")) +
theme_light()  +
ggoptions_default$theme
if(autoLab) text <- ggrepel::geom_text_repel(aes(x=df_var[rownames(res.pca$var$coord),2], y=df_var[rownames(res.pca$var$coord),3],label=df_var[rownames(res.pca$var$coord),1], color = res.pca$var$cos2[,axes[1]] + res.pca$var$cos2[,axes[2]]), size = ggoptions_default$size)
else{text <- geom_text(aes(x=df_var[rownames(res.pca$var$coord),2], y=df_var[rownames(res.pca$var$coord),3],label=df_var[rownames(res.pca$var$coord),1], color = res.pca$var$cos2[,axes[1]] + res.pca$var$cos2[,axes[2]]), size = ggoptions_default$size, nudge_y = 0.15)}
}
if (habillage[1] == "contrib"){
gg_graph <- ggplot() +
aes(x=df_var[rownames(res.pca$var$coord),2], y=df_var[rownames(res.pca$var$coord),3], color = res.pca$var$contrib[,axes[1]]*res.pca$eig[axes[1],1]+res.pca$var$contrib[,axes[2]]*res.pca$eig[axes[2],1]) +
coord_fixed(ratio = 1) +
geom_line(aes(x=x, y=y), data=data.frame(x=-1:1,y=0),lty=ggoptions_default$line.lty, lwd = ggoptions_default$line.lwd, color=ggoptions_default$line.color) +
geom_line(aes(x=x, y=y), data=data.frame(x=0,y=-1:1),lty=ggoptions_default$line.lty, lwd = ggoptions_default$line.lwd, color=ggoptions_default$line.color) +
geom_segment(aes(x=0,y=0,xend=df_var[rownames(res.pca$var$coord),2], yend=df_var[rownames(res.pca$var$coord),3]),arrow=arrow(length=unit(0.2,"cm")),alpha = transparency_var, lty = ggoptions_default$segment.lty, lwd = ggoptions_default$segment.lwd) +
xlab(lab.x) + ylab(lab.y) +
ggtitle(titre) +
scale_color_gradient(low=ggoptions_default$low.col.quanti, high=ggoptions_default$high.col.quanti) +
labs(color = ifelse(legend["title"] %in% legend, legend["title"][[1]], "Ctr")) +
theme_light()  +
ggoptions_default$theme
if(autoLab) text <- ggrepel::geom_text_repel(aes(x=df_var[rownames(res.pca$var$coord),2], y=df_var[rownames(res.pca$var$coord),3],label=df_var[rownames(res.pca$var$coord),1], color = res.pca$var$contrib[,axes[1]]*res.pca$eig[axes[1],1]+res.pca$var$contrib[,axes[2]]*res.pca$eig[axes[2],1]), size = ggoptions_default$size)
else{text <- geom_text(aes(x=df_var[rownames(res.pca$var$coord),2], y=df_var[rownames(res.pca$var$coord),3],label=df_var[rownames(res.pca$var$coord),1], color = res.pca$var$contrib[,axes[1]]*res.pca$eig[axes[1],1]+res.pca$var$contrib[,axes[2]]*res.pca$eig[axes[2],1]), size = ggoptions_default$size, nudge_y = 0.15)}
}
}
if (!is.na(test.invisible[1])){
gg_graph <- ggplot() +
coord_fixed(ratio = 1) +
geom_line(aes(x=x, y=y), data=data.frame(x=-1:1,y=0),lty=ggoptions_default$line.lty, lwd = ggoptions_default$line.lwd, color=ggoptions_default$line.color) +
geom_line(aes(x=x, y=y), data=data.frame(x=0,y=-1:1),lty=ggoptions_default$line.lty, lwd = ggoptions_default$line.lwd, color=ggoptions_default$line.color) +
xlab(lab.x) + ylab(lab.y) +
ggtitle(titre) +
labs(color = legend["title"][[1]]) +
theme_light()  +
ggoptions_default$theme
}
if ((!is.null(res.pca$quanti.sup))&(is.na(test.invisible[2]))){
if (isTRUE(lab.quanti)){
if(habillage[1] == "contrib") text_quanti.sup <- NULL
else{ if (habillage[1] == "none"){ gg_graph <- gg_graph + geom_segment(aes(x=0,y=0,xend=df_var[rownames(res.pca$quanti.sup$coord),2], yend=df_var[rownames(res.pca$quanti.sup$coord),3]),arrow=arrow(length=unit(0.2,"cm")),lty = 2, color = col.quanti.sup)
if (autoLab) text_quanti.sup <- ggrepel::geom_text_repel(aes(x = df_var[rownames(res.pca$quanti.sup$coord),2], y = df_var[rownames(res.pca$quanti.sup$coord),3], label=df_var[rownames(res.pca$quanti.sup$coord),1]), color = col.ind.sup, size = ggoptions_default$size)
else{text_quanti.sup <- geom_text(aes(x = df_var[rownames(res.pca$quanti.sup$coord),2], y = df_var[rownames(res.pca$quanti.sup$coord),3], label=df_var[rownames(res.pca$quanti.sup$coord),1]), color = col.ind.sup, size = ggoptions_default$size,nudge_y=0.15)}
gg_graph <- gg_graph + text_quanti.sup
}
else{ if (habillage[1] == "cos2"){gg_graph <- gg_graph + geom_segment(aes(x=0,y=0,xend=df_var[rownames(res.pca$quanti.sup$coord),2], yend=df_var[rownames(res.pca$quanti.sup$coord),3], color = res.pca$quanti.sup$cos2[,axes[1]] + res.pca$quanti.sup$cos2[,axes[2]]),arrow=arrow(length=unit(0.2,"cm")),lty = 2)
if (autoLab) text_quanti.sup <- ggrepel::geom_text_repel(aes(x = df_var[rownames(res.pca$quanti.sup$coord),2], y = df_var[rownames(res.pca$quanti.sup$coord),3], label=df_var[rownames(res.pca$quanti.sup$coord),1], color = res.pca$quanti.sup$cos2[,axes[1]] + res.pca$quanti.sup$cos2[,axes[2]]), size = ggoptions_default$size)
else{text_quanti.sup <- geom_text(aes(x = df_var[rownames(res.pca$quanti.sup$coord),2], y = df_var[rownames(res.pca$quanti.sup$coord),3], label=df_var[rownames(res.pca$quanti.sup$coord),1], color = res.pca$quanti.sup$cos2[,axes[1]] + res.pca$quanti.sup$cos2[,axes[2]]), size = ggoptions_default$size,nudge_y=0.15)}
}
}
}
gg_graph <- gg_graph + text_quanti.sup
}
else{
gg_graph <- gg_graph +
geom_segment(aes(x=0,y=0,xend=df_var[rownames(res.pca$quanti.sup$coord),2], yend=df_var[rownames(res.pca$quanti.sup$coord),3]),arrow=arrow(length=unit(0.2,"cm")),lty = 2, color = col.quanti.sup)
}
}
gg_graph <- gg_graph + theme + circle
if (is.na(test.invisible[1]) & (isTRUE(lab.var))){
gg_graph <- gg_graph + text + theme + circle
}
}
}
if(graph.type == "ggplot"){
print(gg_graph)
return(gg_graph)
}
}
library(Factoshiny)
source('C:/Users/etien/Desktop/MASTER/STAGE_M1/PCA/PCAshiny/PCAshiny.R', echo=TRUE)
source('C:/Users/etien/Desktop/MASTER/STAGE_M1/PCA/PCAshiny/PCAshiny.R', echo=TRUE)
PCAshiny(wine)
library(ggplot2)
library(ggrepel)
install.packages("ggrepel")
library(ggrepel)
PCAshiny(wine)
?plotoutput
?plotOutput
shinyApp(
ui = basicPage(
fluidRow(
column(width = 4,
plotOutput("plot", height=300,
click = "plot_click",  # Equiv, to click=clickOpts(id="plot_click")
hover = hoverOpts(id = "plot_hover", delayType = "throttle"),
brush = brushOpts(id = "plot_brush")
),
h4("Clicked points"),
tableOutput("plot_clickedpoints"),
h4("Brushed points"),
tableOutput("plot_brushedpoints")
),
column(width = 4,
verbatimTextOutput("plot_clickinfo"),
verbatimTextOutput("plot_hoverinfo")
),
column(width = 4,
wellPanel(actionButton("newplot", "New plot")),
verbatimTextOutput("plot_brushinfo")
)
)
),
server = function(input, output, session) {
data <- reactive({
input$newplot
# Add a little noise to the cars data so the points move
cars + rnorm(nrow(cars))
})
output$plot <- renderPlot({
d <- data()
plot(d$speed, d$dist)
})
output$plot_clickinfo <- renderPrint({
cat("Click:\n")
str(input$plot_click)
})
output$plot_hoverinfo <- renderPrint({
cat("Hover (throttled):\n")
str(input$plot_hover)
})
output$plot_brushinfo <- renderPrint({
cat("Brush (debounced):\n")
str(input$plot_brush)
})
output$plot_clickedpoints <- renderTable({
# For base graphics, we need to specify columns, though for ggplot2,
# it's usually not necessary.
res <- nearPoints(data(), input$plot_click, "speed", "dist")
if (nrow(res) == 0)
return()
res
})
output$plot_brushedpoints <- renderTable({
res <- brushedPoints(data(), input$plot_brush, "speed", "dist")
if (nrow(res) == 0)
return()
res
})
}
)
PCAshiny(wine)
PCAshiny(wine)
catdesshiny(wine)
library(FactoMineR)
catdesshiny(wine)
utils::globalVariables(c("objcatdesshiny","qualicatdesshiny","myListOfThingscatdesshiny"))
catdesshiny <- function(X){
G <- .GlobalEnv
if (!(inherits(X, "data.frame") | inherits(X, "matrix") | inherits(X, "catdes") | inherits(X, "catdesshiny"))){
stop(gettext('X is not a dataframe, a matrix, the results of the catdesshiny function or a catdes result',domain="R-Factoshiny"))
}
assign("objcatdesshiny",ls(all.names=TRUE, envir=G),envir=G)
assign("jdd",X, envir=G)
if(is.data.frame(X)==TRUE){
for (i in 1:ncol(X)) colnames(X)[i] <- gsub(" ",".",colnames(X)[i])
assign("qualicatdesshiny",names(which(sapply(X,is.factor))),envir=G)
if(length(qualicatdesshiny)==0)
stop(gettext('No qualitative variable in your dataset',domain="R-Factoshiny"))
}
# outShiny <- shiny::runApp(system.file("Factocatdesapp", package="Factoshiny"),launch.browser = TRUE)
# outShiny <- shiny::runApp('/home/husson/Site_Git/Factoshiny/inst/Factocatdesapp')
outShiny <- shiny::runApp('C:/Users/etien/Desktop/MASTER/STAGE_M1/plotcatdes/SHINYcatdes')
assign("myListOfThingscatdesshiny",setdiff(ls(all.names=TRUE,envir=G),c("outShiny",objcatdesshiny)),envir=G)  ## on met "a" pour ne pas le supprimer
rm(list=myListOfThingscatdesshiny, envir=G)
rm(list=c("myListOfThingscatdesshiny"),envir=G)
return(invisible(outShiny))
}
catdesshiny(jdd)
runApp('C:/Users/etien/Desktop/MASTER/STAGE_M1/base_pedago')
2+16+8+7**4
runApp('C:/Users/etien/Desktop/MASTER/STAGE_M1/base_pedago')
data(wine)
tab <- table(wine$Soil, wine$Label)
tab <- as.data.frame(table(wine$Soil, wine$Label))
View(tab)
tab <- as.matrix(table(wine$Soil, wine$Label))
tab
library(FactoMineR)
CA
CA(tab)
as.data.frame.matrix(tab)
tab <- as.data.frame.matrix(tab)
CA(tab)
library(Factoshiny)
CAshiny(tab)
runApp('C:/Users/etien/Desktop/MASTER/STAGE_M1/base_pedago')
runApp('C:/Users/etien/Desktop/MASTER/STAGE_M1/base_pedago')
18+15+12+9+6+3
runApp('C:/Users/etien/Desktop/MASTER/STAGE_M1/APPLIS_PEDAGOGIQUES/COEF_CORRELATION/COEF_CORRELATION')
runApp('C:/Users/etien/Desktop/MASTER/STAGE_M1/base_pedago')
runApp('C:/Users/etien/Desktop/MASTER/STAGE_M1/APPLIS_PEDAGOGIQUES/COEF_CORRELATION/COEF_CORRELATION')
library(shinydashboard)
runApp('C:/Users/etien/Desktop/MASTER/STAGE_M1/APPLIS_PEDAGOGIQUES/COEF_CORRELATION/COEF_CORRELATION')
runApp('C:/Users/etien/Desktop/MASTER/STAGE_M1/APPLIS_PEDAGOGIQUES/COEF_CORRELATION/COEF_CORRELATION')
runApp('C:/Users/etien/Desktop/MASTER/STAGE_M1/base_pedago')
runApp('C:/Users/etien/Desktop/MASTER/STAGE_M1/base_pedago')
?dashboardPage
library(MASS)
mvrnorm(n = 15, mu = 0, Sigma = 1)
r <- runif(1,-1,1)
mvrnorm(n = 15, mu = c(0,0), Sigma = matrix(c(1,r,r,1)))
mvrnorm(
n = 15,
mu = c(0,0),
Sigma = matrix(c(1,r,r,1), nrow = 2)
)
mat <- mvrnorm(
n = 15,
mu = c(0,0),
Sigma = matrix(c(1,r,r,1), nrow = 2)
)
cor(mat[,1],mat[,2])
mat <- mvrnorm(
n = 15,
mu = c(0,0),
Sigma = matrix(c(1,r,r,1), nrow = 2),
empirical = T
)
cor(mat[,1],mat[,2])
runApp('C:/Users/etien/Desktop/MASTER/STAGE_M1/APPLIS_PEDAGOGIQUES/COEF_CORRELATION/COEF_CORRELATION')
r <- runif(1,-1,1)
r <- runif(1,-1,1)
r <- runif(1,-1,1)
r <- runif(1,-1,1)
r <- runif(1,-1,1)
r <- runif(1,-1,1)
r <- runif(1,-1,1)
r <- runif(1,-1,1)
r <- runif(1,-1,1)
r <- runif(1,-1,1)
r <- runif(1,-1,1)
r <- runif(1,-1,1)
r <- runif(1,-1,1)
r <- runif(1,-1,1)
r <- runif(1,-1,1)
r <- runif(1,-1,1)
r <- runif(1,-1,1)
r <- runif(1,-1,1)
r <- runif(1,-1,1)
r <- runif(1,-1,1)
r <- runif(1,-1,1)
r <- runif(1,-1,1)
r <- runif(1,-1,1)
r <- runif(1,-1,1)
r <- runif(1000,-1,1)
hist(r)
r <- runif(50000,-1,1)
hist(r)
colnames(mat)
dim(mat)
runApp('C:/Users/etien/Desktop/MASTER/STAGE_M1/APPLIS_PEDAGOGIQUES/COEF_CORRELATION/COEF_CORRELATION')
runApp('C:/Users/etien/Desktop/MASTER/STAGE_M1/APPLIS_PEDAGOGIQUES/COEF_CORRELATION/COEF_CORRELATION')
runApp('C:/Users/etien/Desktop/MASTER/STAGE_M1/APPLIS_PEDAGOGIQUES/COEF_CORRELATION/COEF_CORRELATION')
runApp('C:/Users/etien/Desktop/MASTER/STAGE_M1/APPLIS_PEDAGOGIQUES/COEF_CORRELATION/COEF_CORRELATION')
runApp('C:/Users/etien/Desktop/MASTER/STAGE_M1/APPLIS_PEDAGOGIQUES/COEF_CORRELATION/COEF_CORRELATION')
runApp('C:/Users/etien/Desktop/MASTER/STAGE_M1/APPLIS_PEDAGOGIQUES/COEF_CORRELATION/COEF_CORRELATION')
runApp('C:/Users/etien/Desktop/MASTER/STAGE_M1/APPLIS_PEDAGOGIQUES/COEF_CORRELATION/COEF_CORRELATION')
runApp('C:/Users/etien/Desktop/MASTER/STAGE_M1/APPLIS_PEDAGOGIQUES/COEF_CORRELATION/COEF_CORRELATION')
runApp('C:/Users/etien/Desktop/MASTER/STAGE_M1/APPLIS_PEDAGOGIQUES/COEF_CORRELATION/COEF_CORRELATION')
runApp('C:/Users/etien/Desktop/MASTER/STAGE_M1/APPLIS_PEDAGOGIQUES/COEF_CORRELATION/COEF_CORRELATION')
runApp('C:/Users/etien/Desktop/MASTER/STAGE_M1/APPLIS_PEDAGOGIQUES/COEF_CORRELATION/COEF_CORRELATION')
?theme
runApp('C:/Users/etien/Desktop/MASTER/STAGE_M1/APPLIS_PEDAGOGIQUES/COEF_CORRELATION/COEF_CORRELATION')
?mainPanel
runApp('C:/Users/etien/Desktop/MASTER/STAGE_M1/APPLIS_PEDAGOGIQUES/COEF_CORRELATION/COEF_CORRELATION')
?numericInput
?actionButton
runApp('C:/Users/etien/Desktop/MASTER/STAGE_M1/APPLIS_PEDAGOGIQUES/COEF_CORRELATION/COEF_CORRELATION')
library(shiny)
ui <- fluidPage(
headerPanel("Example reactive"),
mainPanel(
# action buttons
actionButton("button1","Button 1"),
actionButton("button2","Button 2")
)
)
server <- function(input, output) {
# observe button 1 press.
observeEvent(input$button1, {
# The observeEvent takes no dependency on button 2, even though we refer to the input in the following line.
input$button2
showModal(modalDialog(
title = "Button pressed",
"You pressed one of the buttons!"
))
})
}
shinyApp(ui = ui, server = server)
shiny::runApp('C:/Users/etien/Desktop/MASTER/STAGE_M1/APPLIS_PEDAGOGIQUES/LOI_EXPONENTIELLE')
runApp('C:/Users/etien/Desktop/MASTER/STAGE_M1/APPLIS_PEDAGOGIQUES/COEF_CORRELATION/COEF_CORRELATION')
runApp('C:/Users/etien/Desktop/MASTER/STAGE_M1/APPLIS_PEDAGOGIQUES/COEF_CORRELATION/COEF_CORRELATION')
?numericInput
shiny::runApp('D:/BUREAU/MASTER/STAGE_M1/APPLIS_PEDAGOGIQUES/LOI_BINOMIALE')
ui <- fluidPage(
numericInput("num_i",
label = "my input:",
value = 4,
min = 0,
max = 10),
sliderInput("num_s",
label = "my slider:",
value = 4,
min = 0,
max = 10)
)
server <- function(output, input, session){
observe({
updateSliderInput(
session = session,
inputId = "num_s",
value = input$num_i
)
})
observe({
updateSliderInput(
session = session,
inputId = "num_i",
value = input$num_s
)
})
}
shinyApp(ui, server)
runApp('D:/BUREAU/MASTER/STAGE_M1/APPLIS_PEDAGOGIQUES/LOI_BINOMIALE')
